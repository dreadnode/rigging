[tool.poetry]
name = "rigging"
version = "2.2.7"
description = "LLM Interaction Framework"
authors = ["Nick Landers <monoxgas@gmail.com>"]
license = "MIT"
repository = "https://github.com/dreadnode/rigging"
readme = "README.md"
packages = [{ include = "rigging" }]

# Dependencies

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.7.3"
pydantic-xml = "^2.11.0"
loguru = "^0.7.2"
litellm = "^1.60.0"
pandas = "^2.2.2"
eval-type-backport = "^0.2.0"                           # For 3.9 future annotations
elasticsearch = "^8.13.2"
xmltodict = "^0.13.0"
colorama = "^0.4.6"
boto3 = "^1.35.0"
boto3-stubs = { extras = ["s3"], version = "^1.35.0" }
logfire-api = "^3.1.1"
jsonpath-ng = "^1.7.0"
ruamel-yaml = "^0.18.10"
jsonref = "^1.1.0"

vllm = { version = "^0.5.0", optional = true }
transformers = { version = "^4.41.0", optional = true }
accelerate = { version = "^0.30.1", optional = true }

asyncssh = { version = "^2.14.2", optional = true }
click = { version = "^8.1.7", optional = true }
httpx = { version = "^0.27.0", optional = true }
aiodocker = { version = "^0.22.2", optional = true }
websockets = { version = "^13.0", optional = true }

[tool.poetry.extras]
tracing = ["logfire"]
examples = ["asyncssh", "click", "httpx", "aiodocker", "websockets"]
all = [
    "vllm",
    "transformers",
    "accelerate",
    "asyncssh",
    "click",
    "httpx",
    "aiodocker",
    "websockets",
    "logfire",
]

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.27.1"
mypy = "^1.8.0"
ruff = "^0.1.14"
pytest = "^8.0.0"
pandas-stubs = "^2.2.1.240316"
coverage = "^7.5.1"
ipywidgets = "^8.1.3"
pytest-asyncio = "^0.23.7"
types-colorama = "^0.4.15.20240311"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = { extras = ["imaging"], version = "^9.5.20" }
mkdocstrings = "^0.25.0"
mkdocstrings-python = "^1.10.0"
mkdocs-section-index = "^0.3.9"
pymdown-extensions = "^10.8.1"
pygments = "^2.18.0"

# Build

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tests / Coverage

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
command_line = "-m pytest"

[tool.coverage.report]
include = ["rigging/*.py"]
show_missing = true

[tool.coverage.lcov]
output = "lcov.info"

# Tracing

[tool.logfire]
ignore_no_config = true

# Type Checking

[tool.mypy]
plugins = "pydantic.mypy"
strict = true

# Formatting / Linting

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "NPY", # numpydoc
    "TCH", # typecheck
    "A",   # flake8-annotations
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "F722",  # syntax error in forward annotation
    "UP007", # X | Y syntax while we're still supporting 3.9
    "UP038", # isinstance() X | Y instance ^
    "B905",  # zip() without strict (isn't supported in 3.9)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
